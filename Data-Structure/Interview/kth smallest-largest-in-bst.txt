/// using inorder traversal 
/// t.c - O(n) s.c O(h)

class GFG {
 
    static int count = 0;
    // Recursive function to insert an key into BST
    public static Node insert(Node root, int x)
    {
        if (root == null)
            return new Node(x);
        if (x < root.data)
            root.left = insert(root.left, x);
        else if (x > root.data)
            root.right = insert(root.right, x);
        return root;
    }
 
    // Function to find k'th largest element in BST
    // Here count denotes the number of nodes processed so far
    public static Node kthSmallest(Node root, int k)
    {
        // base case
        if (root == null)
            return null;
 
        // search in left subtree
        Node left = kthSmallest(root.left, k);
 
        // if k'th smallest is found in left subtree, return it
        if (left != null)
            return left;
 
        // if current element is k'th smallest, return it
        count++;
        if (count == k)
            return root;
 
        // else search in right subtree
        return kthSmallest(root.right, k);
    }
 
    // Function to find k'th largest element in BST
    public static void printKthSmallest(Node root, int k)
    {
        Node res = kthSmallest(root, k);
        if (res == null)
            System.out.println("There are less than k nodes in the BST");
        else
            System.out.println("K-th Smallest Element is " + res.data);
    }
 
    public static void main(String[] args)
    {
        Node root = null;
        int keys[] = { 20, 8, 22, 4, 12, 10, 14 };
        for (int x : keys)
            root = insert(root, x);
        int k = 3;
        printKthSmallest(root, k);
    }
}
/// using morris traversal
/// tc O(n) s.c O(1)

import java.util.*;
class GfG {
 
// A BST node
static class Node
{
    int key;
    Node left, right;
}
 
// A function to find
static int KSmallestUsingMorris(Node root, int k)
{
    // Count to iterate over elements till we
    // get the kth smallest number
    int count = 0;
 
    int ksmall = Integer.MIN_VALUE; // store the Kth smallest
    Node curr = root; // to store the current node
 
    while (curr != null)
    {
        // Like Morris traversal if current does
        // not have left child rather than printing
        // as we did in inorder, we will just
        // increment the count as the number will
        // be in an increasing order
        if (curr.left == null)
        {
            count++;
 
            // if count is equal to K then we found the
            // kth smallest, so store it in ksmall
            if (count==k)
                ksmall = curr.key;
 
            // go to current's right child
            curr = curr.right;
        }
        else
        {
            // we create links to Inorder Successor and
            // count using these links
            Node pre = curr.left;
            while (pre.right != null && pre.right != curr)
                pre = pre.right;
 
            // building links
            if (pre.right== null)
            {
                //link made to Inorder Successor
                pre.right = curr;
                curr = curr.left;
            }
 
            // While breaking the links in so made temporary
            // threaded tree we will check for the K smallest
            // condition
            else
            {
                // Revert the changes made in if part (break link
                // from the Inorder Successor)
                pre.right = null;
 
                count++;
 
                // If count is equal to K then we found
                // the kth smallest and so store it in ksmall
                if (count==k)
                    ksmall = curr.key;
 
                curr = curr.right;
            }
        }
    }
    return ksmall; //return the found value
}
 
// A utility function to create a new BST node
static Node newNode(int item)
{
    Node temp = new Node();
    temp.key = item;
    temp.left = null;
    temp.right = null;
    return temp;
}
 
/* A utility function to insert a new node with given key in BST */
static Node insert(Node node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == null) return newNode(key);
 
    /* Otherwise, recur down the tree */
    if (key < node.key)
        node.left = insert(node.left, key);
    else if (key > node.key)
        node.right = insert(node.right, key);
 
    /* return the (unchanged) node pointer */
    return node;
}
 
// Driver Program to test above functions
public static void main(String[] args)
{
    /* Let us create following BST
            50
        /     \
        30     70
        / \ / \
    20 40 60 80 */
    Node root = null;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
 
    for (int k=1; k<=7; k++)
    System.out.print(KSmallestUsingMorris(root, k) + " ");
 
}
}


/// using morris traversal
/// tc O(n) s.c O(1)
// kth largest
Algorithm
1) Initialize Current as root.
2) Initialize a count variable to 0.
3) While current is not NULL :
   3.1) If current has no right child
   a) Increment count and check if count is equal to K.
      1) If count is equal to K, simply return current 
         Node as it is the Kth largest Node.
   b) Otherwise, Move to the left child of current.

   3.2) Else, here we have 2 cases:
   a) Find the inorder successor of current Node. 
      Inorder successor is the left most Node 
      in the right subtree or right child itself.
   b) If the left child of the inorder successor is NULL:
      1) Set current as the left child of its inorder 
         successor.
      2) Move current Node to its right.
   c) Else, if the threaded link between the current Node 
      and it's inorder successor already exists :
      1) Set left pointer of the inorder successor as NULL.
      2) Increment count and check if count is equal to K.
           a) If count is equal to K, simply return current
              Node as it is the Kth largest Node.

      3) Otherwise, Move current to it's left child.
      
      
class GfG
{
 
static class Node
{
    int data;
    Node left, right;
}
 
// helper function to create a new Node
static Node newNode(int data)
{
    Node temp = new Node();
    temp.data = data;
    temp.right = null;
    temp.left = null;
    return temp;
}
 
static Node KthLargestUsingMorrisTraversal(Node root, int k)
{
    Node curr = root;
    Node Klargest = null;
 
    // count variable to keep count of visited Nodes
    int count = 0;
 
    while (curr != null)
    {
        // if right child is NULL
        if (curr.right == null)
        {
 
            // first increment count and check if count = k
            if (++count == k)
                Klargest = curr;
 
            // otherwise move to the left child
            curr = curr.left;
        }
 
        else
        {
 
            // find inorder successor of current Node
            Node succ = curr.right;
 
            while (succ.left != null && succ.left != curr)
                succ = succ.left;
 
            if (succ.left == null)
            {
 
                // set left child of successor to the
                // current Node
                succ.left = curr;
 
                // move current to its right
                curr = curr.right;
            }
 
            // restoring the tree back to original binary
            // search tree removing threaded links
            else
            {
 
                succ.left = null;
 
                if (++count == k)
                    Klargest = curr;
 
                // move current to its left child
                curr = curr.left;
            }
        }
    }
    return Klargest;
}
 
// Driver code
public static void main(String[] args)
{
    // Your Java Code
    /* Constructed binary tree is
        4
        / \
    2 7
    / \ / \
    1 3 6 10 */
 
    Node root = newNode(4);
    root.left = newNode(2);
    root.right = newNode(7);
    root.left.left = newNode(1);
    root.left.right = newNode(3);
    root.right.left = newNode(6);
    root.right.right = newNode(10);
 
    System.out.println("Finding K-th largest Node in BST : " +
                    KthLargestUsingMorrisTraversal(root, 2).data);
}
}      
