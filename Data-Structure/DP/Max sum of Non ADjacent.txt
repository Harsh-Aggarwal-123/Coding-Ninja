Memorization
import java.util.*;
public class Solution {
    public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
       /* int n = nums.size();
        int ans = solve(nums,n-1);
        return ans;*/
        int n = nums.size();
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        return solve(n-1, nums, dp);
    
    }

    private static int solve(int n, ArrayList<Integer> nums, int[] dp) {
        if(n<0){
            return 0;
        }
        if(n == 0){
            return nums.get(0);
        }
        if(dp[n] != -1) {
            return dp[n];
        }
        int incl = solve(n-2, nums, dp) + nums.get(n);
        int excl = solve( n-1, nums, dp) + 0;
        dp[n] = Math.max(incl, excl);
        return dp[n];
        
        
    }
}

Recursion
import java.util.*;
public class Solution {
    private static int solve(ArrayList<Integer> nums, int n){
        if(n<0){
            return 0;
        }
        if(n == 0){
            return nums.get(0);
        }
        int incl = solve(nums, n-2) + nums.get(n);
        int excl = solve(nums, n-1) + 0;
        return Math.max(incl, excl);
        
    }
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
        int n = nums.size();
        int ans = solve(nums,n-1);
        return ans;
	
	}
}

Dp
public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
       int n = nums.size();
            int prev2=0;
            int prev1=nums.get(0);
            for(int i=1; i<n; i++) {
                int incl = prev2 + nums.get(i);
                int excl = prev1 + 0;
                int ans = Math.max(incl, excl);
                prev2=prev1;
                prev1=ans;
            }
            return prev1;
	
	}
}
